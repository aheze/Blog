[ { "title": "Basics", "url": "/posts/SwiftUI-Basics/", "categories": "Z Basic SwiftUI", "tags": "Swift, SwiftUI, iOS", "date": "2022-01-04 20:21:00 -0800", "snippet": "Not written yet, will do soon" }, { "title": "Swift", "url": "/posts/Swift/", "categories": "Week 13", "tags": "Swift, SwiftUI, iOS", "date": "2022-01-04 20:19:00 -0800", "snippet": "OverviewRemember that SwiftUI code from the previous article?struct ContentView: View { var body: some View { Text(&quot;Hello, world!&quot;) .foregroundColor(Color.blue) }}That’s actually swift code. Pretty advanced swift code, but it’s still swift. View is a protocol The brackets {} are closures &quot;Hello, world!&quot; is a string .blue is a variableBut for now, let’s start simpler and first learn the basics.Creating variablesSimple syntax like python.let string: String = &quot;Hello&quot;let string = &quot;Hello&quot; /// this also worksDefining functionsfunc function1() { print(&quot;Hi&quot;)}/// This has 1 parameterfunc function2(string: String) { print(string)}/// This has 1 parameter with an external namefunc function3(stringToOutput string: String) { print(string)}/// This has 1 parameter with an external namefunc function4(stringToOutput string: String) { print(string)}Calling functionsfunction1() /// Result: Hifunction2(string: &quot;Hi&quot;) /// Result: Hifunction3(stringToOutput: &quot;Hi&quot;) /// Result: Hi" }, { "title": "Challenge &amp;#35;1", "url": "/posts/GettingStartedChallenge/", "categories": "Getting Started", "tags": "Swift, SwiftUI, iOS", "date": "2022-01-03 20:19:00 -0800", "snippet": "Challenge #1Make a view that looks like this:struct ContentView: View { var body: some View { /// your code goes here. }}" }, { "title": "SwiftUI", "url": "/posts/SwiftUI/", "categories": "Getting Started", "tags": "Swift, SwiftUI, iOS", "date": "2022-01-03 20:18:00 -0800", "snippet": "OverviewYou’ve probably never heard of SwiftUI before, so I’ll clear some things up. SwiftUI is a framework, which just means “developer tool.” SwiftUI is built using the Swift programming language, which we’ll go over in the next section. SwiftUI is the equivalent to HTML + CSS – you write and style views using it.Credit: AppleIn SwiftUI, there are 2 main concepts: Views and View Modifiers. You compose these together to form a user interface (that’s that the “UI” part stands for in SwiftUI). Here’s the basic structure of a view:/// 1.struct ContentView: View { /// 2. var body: some View { /// 3. Text(&quot;Hello, world!&quot;) /// 4. .foregroundColor(Color.blue) }} This declares a custom view with the name “ContentView.” This is where you put sub-views inside. This is another view, called Text. The “Hello World” part is a parameter, which we’ll go over later. This is a view modifier, which is attached to the Text. As you can assume, it changes the text’s color to blue.Text is a built-in view. There are several dozen more of these views – here’s a list. However, we’ll only focus on a couple.At its core, that’s all SwiftUI is – a framework to combine and modify views. In the next section, we’ll go over SwiftUI in more detail." }, { "title": "Swift Playgrounds", "url": "/posts/Swift-Playgrounds/", "categories": "Getting Started", "tags": "Swift Playgrounds, Swift, SwiftUI, iOS", "date": "2022-01-03 20:17:00 -0800", "snippet": "OverviewSwift Playgrounds is a code editor that runs on iPad (download). So it’s an app that lets you make apps.The appOpen it, and select a project (or create a new one with the plus button). The interface is split into 3 parts: Left: The sidebar, which shows all your files Center: The place where you write code Right: The app preview, which shows the result of your codeAt the top, there’s some more buttons: Return to the app gallery Hide/show the sidebar Create a new file Run your code in a separate window Browse the presets library More options Expand the preview to full-screen Hide the previewWhen you write code, the app preview will automatically update. If there’s a compile error, another button will appear at the top that lists out the errors.In a brand-new project, there will be 2 files on the left sidebar: ContentView and MyApp. The file names don’t matter and are only used for organizing, unlike Java, which requires it to be the same as the class name.MyAppMyApp contains the main starting point of your app. You can rename this to whatever you want – as long as it has the @main attribute, it will be the starting point.import SwiftUI@main /// &amp;lt;-- indicates that this is the starting point of your app.struct MyApp: App { var body: some Scene { WindowGroup { ContentView() /// This is what Swift Playgrounds will display. } }}For now, ignore struct, some Scene, WindowGroup, and all the other keywords. Just know that your SwiftUI goes inside WindowGroup { }.ContentViewYour SwiftUI code goes here. Here’s the default, placeholder code:import SwiftUIstruct ContentView: View { var body: some View { VStack { Image(systemName: &quot;globe&quot;) .imageScale(.large) .foregroundColor(.accentColor) Text(&quot;Hello, world!&quot;) } }}We’ll go over this in the next section, but for now, notice how the result appears on the right:That’s pretty much it! Swift Playgrounds is very modern and abstracts away all the redundant steps." }, { "title": "Introduction", "url": "/posts/Intro/", "categories": "Getting Started", "tags": "Swift, SwiftUI, iOS", "date": "2022-01-03 20:16:00 -0800", "snippet": "Hope you had a good winter break! So since we haven’t done much coding last year, we’re going to make up for it this year. For the next couple months, we’ll make iOS apps.This isn’t App Lab or Scratch or whatever, it’s actual apps that you run on your phone – for example, Weather or Instagram. We’ll be primarily using 3 things: Swift Playgrounds SwiftUI SwiftSwift PlaygroundsThis is an IDE, or code editor. It’s super modern and fast, unlike replit or BlueJ. It was just released by Apple in December 2021 and has lots of nice features. It should be pre-installed on the iPad you got.SwiftUIIf you’ve ever designed or coded a screen or app, you probably know how frustrating it is. SwiftUI simplifies everything and lets you declare interfaces with barely any code. What you see is what you get.struct ContentView: View { var body: some View { HStack { Image(systemName: &quot;hand.wave.fill&quot;) Text(&quot;Hello!&quot;) } .foregroundColor(.white) .padding() .background(Color.blue) .cornerRadius(16) }}ResultSwiftThis is the programming language that we’ll be using. It’s faster than python, easier to read than javascript, and simple to pick up.let string = &quot;Hello, world!&quot;print(string)With that, let’s get started." }, { "title": "Coding Club - Meeting &amp;#35;11 Slides", "url": "/posts/GettingStartedSlides/", "categories": "Getting Started", "tags": "Swift, SwiftUI, iOS", "date": "2022-01-03 20:15:00 -0800", "snippet": "" }, { "title": "Welcome Back, Coding Club!", "url": "/posts/Announcement/", "categories": "Announcements", "tags": "", "date": "2022-01-03 00:00:00 -0800", "snippet": "Hope to have a year full of actually coding." } ]
